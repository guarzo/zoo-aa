# Every setting in base.py can be overloaded by redefining it here.
from .base import *

SECRET_KEY = os.environ.get("AA_SECRET_KEY")
SITE_NAME = os.environ.get("AA_SITENAME")
SITE_URL = (
    f"{os.environ.get('PROTOCOL')}"
    f"{os.environ.get('AUTH_SUBDOMAIN')}."
    f"{os.environ.get('DOMAIN')}"
)
CSRF_TRUSTED_ORIGINS = [SITE_URL]
DEBUG = os.environ.get("AA_DEBUG", False)
DATABASES["default"] = {
    "ENGINE": "django.db.backends.mysql",
    "NAME": os.environ.get("AA_DB_NAME"),
    "USER": os.environ.get("AA_DB_USER"),
    "PASSWORD": os.environ.get("AA_DB_PASSWORD"),
    "HOST": os.environ.get("AA_DB_HOST"),
    "PORT": os.environ.get("AA_DB_PORT", "3306"),
    "OPTIONS": {
        "charset": os.environ.get("AA_DB_CHARSET", "utf8mb4")
    }
}

# Register an application at https://developers.eveonline.com for Authentication
# & API Access and fill out these settings. Be sure to set the callback URL
# to https://example.com/sso/callback substituting your domain for example.com
# Logging in to auth requires the publicData scope (can be overridden through the
# LOGIN_TOKEN_SCOPES setting). Other apps may require more (see their docs).

ESI_SSO_CLIENT_ID = os.environ.get("ESI_SSO_CLIENT_ID")
ESI_SSO_CLIENT_SECRET = os.environ.get("ESI_SSO_CLIENT_SECRET")
ESI_SSO_CALLBACK_URL = f"{SITE_URL}/sso/callback"
ESI_USER_CONTACT_EMAIL = os.environ.get(
    "ESI_USER_CONTACT_EMAIL"
)  # A server maintainer that CCP can contact in case of issues.

# By default emails are validated before new users can log in.
# It's recommended to use a free service like SparkPost or Elastic Email to send email.
# https://www.sparkpost.com/docs/integrations/django/
# https://elasticemail.com/resources/settings/smtp-api/
# Set the default from email to something like 'noreply@example.com'
# Email validation can be turned off by uncommenting the line below. This can break some services.
REGISTRATION_VERIFY_EMAIL = False
EMAIL_HOST = os.environ.get("AA_EMAIL_HOST", "")
EMAIL_PORT = os.environ.get("AA_EMAIL_PORT", 587)
EMAIL_HOST_USER = os.environ.get("AA_EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("AA_EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.environ.get("AA_EMAIL_USE_TLS", True)
DEFAULT_FROM_EMAIL = os.environ.get("AA_DEFAULT_FROM_EMAIL", "")

ROOT_URLCONF = "myauth.urls"
WSGI_APPLICATION = "myauth.wsgi.application"
STATIC_ROOT = "/var/www/myauth/static/"
BROKER_URL = f"redis://{os.environ.get('AA_REDIS', 'redis:6379')}/0"
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{os.environ.get('AA_REDIS', 'redis:6379')}/1",  # change the 1 here to change the database used
    }
}


# Add any additional apps to this list.
INSTALLED_APPS += [
    # https://allianceauth.readthedocs.io/en/latest/features/apps/index.html
    'allianceauth.corputils',
    # 'allianceauth.fleetactivitytracking',
    # 'allianceauth.optimer',
    'allianceauth.permissions_tool',
    # 'allianceauth.srp',
    'allianceauth.timerboard',
    'allianceauth.eveonline.autogroups',
    'allianceauth.hrapplications',

    # https://allianceauth.readthedocs.io/en/latest/features/services/index.html
    'allianceauth.services.modules.discord',
    # 'allianceauth.services.modules.discourse',
    # 'allianceauth.services.modules.ips4',
    # 'allianceauth.services.modules.openfire',
    # 'allianceauth.services.modules.mumble',
    # An example of running mumble with authenticator in docker can be found here
    # https://github.com/Solar-Helix-Independent-Transport/allianceauth-docker-mumble
    # 'allianceauth.services.modules.phpbb3',
    # 'allianceauth.services.modules.smf',
    # 'allianceauth.services.modules.teamspeak3',
    # 'allianceauth.services.modules.xenforo',

    'afat',
    'aadiscordbot',
    'aapayout',
    'package_monitor',
    'timezones',
    'fleetfinder',
    'corptools',
    'eveuniverse',
    'fittings',
    'securegroups',
    'memberaudit',
    'wanderer',
    'standingssync',
    'standingsrequests',
]

#######################################
# Add any custom settings below here. #
#######################################

####
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
####


# aa payout config
AAPAYOUT_JANICE_API_KEY = "REDACTED"  # Secret removed
AAPAYOUT_JANICE_MARKET = 2          # Market hub: jita, amarr, dodixie, rens, hek
AAPAYOUT_JANICE_PRICE_TYPE = "buy"      # Price type: buy or sell

# Payout Configuration
AAPAYOUT_CORP_SHARE_PERCENTAGE = 10     # Percentage of loot value to corporation
AAPAYOUT_MINIMUM_PAYOUT = 1000000       # Minimum payout amount in ISK (1M ISK)
AAPAYOUT_SCOUT_BONUS_PERCENTAGE = 10    # Scout bonus percentage (default: +10%)

# Optional: Holding Corporation
AAPAYOUT_HOLDING_CORP_ID = 98648442    # EVE corporation ID for corp share recipient
TEMPLATES[0]['OPTIONS']['context_processors'].append(
        'aapayout.context_processors.fc_character'
        )

LOGGING['loggers']['aapayout'] = {'handlers': ['log_file'], 'level': 'DEBUG'}

# settings for standingssync
CELERYBEAT_SCHEDULE['standingssync.run_regular_sync'] = {
    'task': 'standingssync.tasks.run_regular_sync',
    'schedule': crontab(minute=0, hour='*/2')
}

STANDINGSSYNC_REPLACE_CONTACTS = "merge"

#wanderer
CELERYBEAT_SCHEDULE['wanderer_cleanup_access_lists'] = {
    'task': 'wanderer.tasks.cleanup_all_access_lists',
    'schedule': crontab(minute='0', hour='*/1'),
}


# Discord Configuration
# Be sure to set the callback URLto https://example.com/discord/callback/
# substituting your domain for example.com in Discord's developer portal
# (Be sure to add the trailing slash)
DISCORD_GUILD_ID = '576238803824410629'
DISCORD_CALLBACK_URL = "https://auth.zoolanders.space/discord/callback/"
DISCORD_APP_ID = '1324878354796646451'
DISCORD_APP_SECRET = "REDACTED"
DISCORD_BOT_TOKEN = "REDACTED"
DISCORD_SYNC_NAMES = True

CELERYBEAT_SCHEDULE['discord.update_all_usernames'] = {
    'task': 'discord.update_all_usernames',
    'schedule': crontab(minute='0', hour='*/12'),
}

# AFAT - https://github.com/ppfeufer/allianceauth-afat
CELERYBEAT_SCHEDULE["afat_update_esi_fatlinks"] = {
    "task": "afat.tasks.update_esi_fatlinks",
    "schedule": crontab(minute="*/1"),
}

CELERYBEAT_SCHEDULE["afat_logrotate"] = {
    "task": "afat.tasks.logrotate",
    "schedule": crontab(minute="0", hour="1"),
}

# Package-Monitor
CELERYBEAT_SCHEDULE['package_monitor_update_distributions'] = {
    'task': 'package_monitor.tasks.update_distributions',
    'schedule': crontab(minute='*/60'),
}

# Discord Bot
## Settings for Allianceauth-Discordbot
# Admin Commands
ADMIN_DISCORD_BOT_CHANNELS = [971101320138350603]
# Adm Commands
ADM_DISCORD_BOT_CHANNELS = [971101320138350603]

DISCORD_BOT_MEMBER_ALLIANCES = [99010452] # A list of alliances to be considered "Mains"

PRICE_CHECK_HOSTNAME = "evepraisal.com" # Point to your favorite evepraisal

## Insert AADiscordBot's logging into Django Logging config
LOGGING['handlers']['bot_log_file']= {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log/discord_bot.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
        }
LOGGING['loggers']['aadiscordbot'] = {'handlers': ['bot_log_file'],'level': 'DEBUG'}


# AA Fleetfinder - https://github.com/ppfeufer/aa-fleetfinder
if "fleetfinder" in INSTALLED_APPS:
    CELERYBEAT_SCHEDULE["fleetfinder_check_fleet_adverts"] = {
        "task": "fleetfinder.tasks.check_fleet_adverts",
        "schedule": crontab(minute="*/1"),
    }


CELERYBEAT_SCHEDULE["memberaudit_run_regular_updates"] = {
    "task": "memberaudit.tasks.run_regular_updates",
    "schedule": 900,
}

# id of character to use for updating alliance contacts
STANDINGS_API_CHARID = 2115754172
STR_CORP_IDS = [ 98648442 ]
STR_ALLIANCE_IDS = [ 99010452 ]

# This is a map, where the key is the State the user is in
# and the value is a list of required scopes to check
SR_REQUIRED_SCOPES = {
    'Member': ['publicData'],
    'Blue': [],
    '': []  # no state
}

# CELERY tasks
CELERYBEAT_SCHEDULE['standings_requests_standings_update'] = {
    'task': 'standings_requests.standings_update',
    'schedule': crontab(minute='*/30'),
}
CELERYBEAT_SCHEDULE['standings_requests_update_associations_api'] = {
    'task': 'standings_requests.update_associations_api',
    'schedule': crontab(minute='30', hour='*/3'),
}
CELERYBEAT_SCHEDULE['standings_requests_validate_requests'] = {
    'task': 'standings_requests.validate_requests',
    'schedule': crontab(minute='0', hour='*/6'),
}
CELERYBEAT_SCHEDULE['standings_requests_purge_stale_data'] = {
    'task': 'standings_requests.purge_stale_data',
    'schedule': crontab(minute='0', hour='*/24'),
}

